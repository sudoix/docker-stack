version: '3.8'

services:
  mongo1:
    build:
      context: /root/mongo/mongo/
      dockerfile: Dockerfile
    container_name: mongodb-replicaset1
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: root
    ports:
      - "27017:27017"
    command: --replSet rs0 --keyFile /etc/mongo-keyfile --bind_ip_all --port 27017
    healthcheck:
      test: echo "try { rs.status() } catch (err) { rs.initiate({_id:'rs0',members:[{_id:0,host:'mongo1:27017'}, {_id:1,host:'mongo2:27017'}, {_id:2,host:'mongo3:27017'}]}) }" | mongosh --port 27017 -u root -p root --authenticationDatabase admin
      interval: 10s
      timeout: 20s
      start_period: 30s
      retries: 5
    volumes:
      - mongo1_data:/data/db

  mongo2:
    build:
      context: /root/mongo/mongo/
      dockerfile: Dockerfile
    container_name: mongodb-replicaset2
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: root
    ports:
      - "27018:27017"
    command: --replSet rs0 --keyFile /etc/mongo-keyfile --bind_ip_all --port 27017
    volumes:
      - mongo2_data:/data/db

  mongo3:
    build:
      context: /root/mongo/mongo/
      dockerfile: Dockerfile
    container_name: mongodb-replicaset3
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: root
    ports:
      - "27019:27017"
    command: --replSet rs0 --keyFile /etc/mongo-keyfile --bind_ip_all --port 27017
    volumes:
      - mongo3_data:/data/db

volumes:
  mongo1_data: {}
  mongo2_data: {}
  mongo3_data: {}

